services:

  laravel_app:
    build:
      context: ./news-aggregator-backend
    container_name: laravel_app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./news-aggregator-backend:/var/www
      - ./news-aggregator-backend/.env:/var/www/.env
    networks:
      - app-network
    depends_on:
      - db

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "8000:80"
    volumes:
      - ./news-aggregator-backend:/var/www
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - laravel_app
    networks:
      - app-network

  react_app:
    build:
      context: ./news-aggregator-frontend
    container_name: react_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./news-aggregator-frontend:/usr/src/app
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: news_aggregator
      MYSQL_ROOT_PASSWORD: 3jbY8KXCK2WKAohqniA=
    volumes:
      - dbdata:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - app-network
  
  queue_worker:
    build:
      context: ./news-aggregator-backend
      dockerfile: Dockerfile.worker  # Separate Dockerfile for the worker
    container_name: laravel_queue_worker
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    restart: unless-stopped
    depends_on:
      - laravel_app
      - db
    volumes:
      - ./news-aggregator-backend:/var/www
      - ./news-aggregator-backend/.env:/var/www/.env
    networks:
      - app-network

  cron:
    build:
      context: ./news-aggregator-backend
      dockerfile: Dockerfile.cron  # Separate Dockerfile for cron
    container_name: laravel_cron
    restart: unless-stopped
    command: cron -f
    depends_on:
      - laravel_app
      - db
    volumes:
      - ./news-aggregator-backend:/var/www
      - ./news-aggregator-backend/.env:/var/www/.env
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: 3jbY8KXCK2WKAohqniA=
    ports:
      - "127.0.0.1:8080:80"
    depends_on:
      - db
    networks:
      - app-network

volumes:
  dbdata:

networks:
  app-network:
    driver: bridge
